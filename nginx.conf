
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    lua_shared_dict blockip_dict 10m;
    init_by_lua_block {
            local file_path = "/usr/local/openresty/data/blockip_dict.txt"
            local file = io.open(file_path, "r")
            if file then
                for line in file:lines() do
                    ngx.shared.blockip_dict:set(line, true)
                    ngx.log(ngx.WARN, "line " ..line)
                end
                file:close()
            else
                ngx.log(ngx.WARN, "File '/usr/local/openresty/data/blockip_dict.txt' not found or unable to open. Skipping loading initial data.")
            end
        }
    server {
        listen 80;

        location /setBlockIp {
            default_type 'text/plain';
            allow 127.0.0.1;
            deny all;
            content_by_lua_block {
                ngx.req.read_body()
                local args, err = ngx.req.get_post_args()
                if not args then
                    ngx.status = 400
                    ngx.say("Failed to get post args: ", err)
                    return ngx.exit(400)
                end
                local ip = args.ip
                if not ip then
                    ngx.status = 400
                    ngx.say("IP parameter is required")
                    return ngx.exit(400)
                end
                local success, set_err, forcible = ngx.shared.blockip_dict:set(ip, true, 60)  -- 将 IP 地址设置为被封禁状态，持续时间为60秒
                
                local file = io.open("/usr/local/openresty/data/blockip_dict.txt", "a")
                if file then
                    file:write(ip .. "\n")
                    file:close()
                else
                    ngx.log(ngx.WARN, "Failed to open data/blockip_dict.txt for writing")
                end
                if not success then
                    ngx.status = 500
                    ngx.say("Failed to set IP in Lua Shared Dict: ", set_err)
                    return ngx.exit(500)
                end
                ngx.say("IP ", ip, " has been blocked for 60 seconds")
            }
        }

        location / {
            content_by_lua_block {
                local ip = ngx.var.remote_addr
                if ngx.shared.blockip_dict:get(ip) then
                    ngx.status = 403
                    ngx.say("Access Denied: Your IP is blocked")
                    return ngx.exit(403)
                else 
                    ngx.exec("@proxy")
                end 
            }
        }

        location @proxy {
            proxy_pass http://www.baidu.com;
        }
    }

}
